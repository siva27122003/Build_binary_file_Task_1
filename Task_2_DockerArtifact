
---

```markdown
# Go Project Docker Setup

This project demonstrates how to build and run a Go application using Docker.

## Project Structure

```

go\_project/
├── Dockerfile
├── build.sh
├── main.go
├── go.mod
└── go.sum

````

## build.sh Script

Ensure your `build.sh` script contains the following:

```bash
#!/bin/bash
set -e
echo "Building the Go application..."
mkdir -p bin
go build -o bin/bookapi main.go
````

## Dockerfile

```dockerfile
# Stage 1: Build
FROM golang:1.22.2 AS builder
WORKDIR /app
COPY . .
RUN chmod +x build.sh
RUN ./build.sh

# Stage 2: Final slim image
FROM debian:bullseye-slim
WORKDIR /app
COPY --from=builder /app/bin/bookapi .
EXPOSE 8088
CMD ["./bookapi"]
```

## Build and Run

Step 1: Build the Docker image

```bash
docker build -t my_app_image .
```

Step 2: Run the Docker container

```bash
docker run -it -p 8088:8088 my_app_image
```

## Common Errors and Fixes

Error: Go version mismatch

```
go: go.mod requires go >= 1.22.2 (running go 1.21.13; GOTOOLCHAIN=local)
```

Fix: Update your Dockerfile to use a compatible version of Go.

```dockerfile
FROM golang:1.22.2 AS builder
```

Error: Executable not found in final image

```
exec: "./bin/bookapi": stat ./bin/bookapi: no such file or directory
```

Cause: The binary was not copied to the expected path.

Fix: Use one of the following solutions:

Option A (recommended):

```dockerfile
COPY --from=builder /app/bin/bookapi .
CMD ["./bookapi"]
```

Option B (if you want to keep it inside /bin):

```dockerfile
RUN mkdir -p bin
COPY --from=builder /app/bin/bookapi ./bin/bookapi
CMD ["./bin/bookapi"]
```

## Notes

* The `main.go` file must contain a valid `func main()`.
* Make sure `build.sh` is executable using `chmod +x build.sh`.
* Update `EXPOSE` and `CMD` ports if your app uses a different one.

```

Let me know if you'd like this as a downloadable `.md` file.
```
